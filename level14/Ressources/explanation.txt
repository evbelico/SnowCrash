Upon arrival, we get nothing at all.
We can dig with the usual `ls -la` and `find / -uid 3014 -gid 3014` but we won't find anything.
We can deduce we have to exploit the `getflag` command directly. Let's head into gdb :
`gdb /bin/getflag`
`run` : "Starting program: /bin/getflag
You should not reverse this" (so let's reverse it)
`disas main`

We can see it uses functions such as `ptrace()`, `getenv()`, `open()`, and `getuid()` :
" 0x08048989 <+67>:	call   0x8048540 <ptrace@plt>
   0x0804898e <+72>:	test   %eax,%eax
   0x08048990 <+74>:	jns    0x80489a8 <main+98>
   0x08048992 <+76>:	movl   $0x8048fa8,(%esp)
   0x08048999 <+83>:	call   0x80484e0 <puts@plt>
   0x0804899e <+88>:	mov    $0x1,%eax
   0x080489a3 <+93>:	jmp    0x8048eb2 <main+1388>
   0x080489a8 <+98>:	movl   $0x8048fc4,(%esp)
   0x080489af <+105>:	call   0x80484d0 <getenv@plt>
   0x080489b4 <+110>:	test   %eax,%eax
   0x080489b6 <+112>:	je     0x80489ea <main+164>
   0x080489b8 <+114>:	mov    0x804b040,%eax
   0x080489bd <+119>:	mov    %eax,%edx
   0x080489bf <+121>:	mov    $0x8048fd0,%eax
[...]
   0x080489f9 <+179>:	call   0x8048500 <open@plt>
[...]
   0x08048afd <+439>:	call   0x80484b0 <getuid@plt>"

The program goes back and forth. A quick look in the man and we understand that the `ptrace()` lets parent processes observe and control the execution of other processes. It can examine and change core images and registers. On error, it returns "-1".
Since ptrace is called first, we can deduce we need to dig there. Using our knowledge from the previous challenge (`getuid()` modification), we'll try to look into ptrace and change the uid to flag14's one.

Go back to gdb :
`gdb /bin/getflag`
`break ptrace`
`break getuid`
`run`
`step` ("Single stepping until exit from function ptrace,
which has no line number information.")
From there, we can print the value inside the register : `print $eax` => "$2 = -1"
So the return value from ptrace is in error mode ("-1"). Let's make it OK : `set $eax=1`
Step again to `getuid()` : `step`, `step` ("Single stepping until exit from function getuid,
which has no line number information.")
Let's look at the registry again : `print $eax` => "$4 = 2014"
It is level14's uid, let's change it to flag14's one : `set $eax=3014`
Then step : 
"(gdb) step
Single stepping until exit from function main,
which has no line number information.
Check flag.Here is your token : 7QiHafiNa3HVozsaXkawuYrTstxbpABHD8CPnHJ"

Well done !
(Additionnally, you can log in as flag14 to get a congratulations message, and get the flag once more)
